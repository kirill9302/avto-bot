import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import cv2
import os
import requests
from bs4 import BeautifulSoup
import urllib.parse
import pytesseract
from PIL import Image
import sqlite3
from datetime import datetime, timedelta

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
API_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù_–û–¢_BOTFATHER'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("parts.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS searches (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        query TEXT,
        filter_type TEXT,
        price_filter TEXT,
        city TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
""")

cursor.execute("""
    CREATE TABLE IF NOT EXISTS cache (
        query TEXT PRIMARY KEY,
        filter_type TEXT,
        price_filter TEXT,
        city TEXT,
        results TEXT,
        avito_link TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
""")
conn.commit()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üì∏ –§–æ—Ç–æ"), KeyboardButton("‚úè –¢–µ–∫—Å—Ç"))
main_kb.add(KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("üåç –ì–æ—Ä–æ–¥"))

filters_kb = ReplyKeyboardMarkup(resize_keyboard=True)
filters_kb.row(KeyboardButton("–û—Ä–∏–≥–∏–Ω–∞–ª"), KeyboardButton("–ê–Ω–∞–ª–æ–≥"), KeyboardButton("–ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–µ"))
filters_kb.row(KeyboardButton("–î–æ 5000 ‚ÇΩ"), KeyboardButton("5000-10000 ‚ÇΩ"), KeyboardButton("–û—Ç 10000 ‚ÇΩ"))
filters_kb.add(KeyboardButton("‚óÄ –ù–∞–∑–∞–¥"))

cities_kb = ReplyKeyboardMarkup(resize_keyboard=True)
for city in ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]:
    cities_kb.add(KeyboardButton(city))
cities_kb.add(KeyboardButton("‚óÄ –ù–∞–∑–∞–¥"))

# --- OCR: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ ---
def find_part_number(image_path):
    try:
        img = cv2.imread(image_path)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        temp_path = image_path.replace(".jpg", "_cleaned.jpg")
        cv2.imwrite(temp_path, thresh)
        text = pytesseract.image_to_string(Image.open(temp_path), lang='eng+rus')
        os.remove(temp_path)
        words = text.split()
        part_numbers = [w for w in words if w.isalnum() and len(w) >= 5]
        return part_numbers[0] if part_numbers else None
    except Exception as e:
        logging.error(f"OCR error: {e}")
        return None

# --- VIN / –≥–æ—Å–Ω–æ–º–µ—Ä (—É–ø—Ä–æ—â—ë–Ω–Ω–æ) ---
def detect_car_from_text(text):
    regions = {
        "77": "–ú–æ—Å–∫–≤–∞", "99": "–ú–æ—Å–∫–≤–∞", "177": "–ú–æ—Å–∫–≤–∞",
        "78": "–°–ü–±", "98": "–°–ü–±", "178": "–°–ü–±",
        "54": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "154": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"
    }
    digits = ''.join(filter(str.isdigit, text[-4:]))
    for code, city in regions.items():
        if digits.startswith(code.replace("1", "", 1)):
            return city
    return None

# --- Drom: –ø–∞—Ä—Å–∏–Ω–≥ —Å –∫—ç—à–µ–º ---
def get_drom_url(city):
    mapping = {"–ú–æ—Å–∫–≤–∞": "moskva", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "sankt-peterburg", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "novosibirsk"}
    return f"https://{mapping.get(city, 'novosibirsk')}.drom.ru"

def parse_drom(query, part_type="–õ—é–±—ã–µ", price_filter="–õ—é–±–∞—è —Ü–µ–Ω–∞", city="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"):
    cache_key = (query, part_type, price_filter, city)
    cursor.execute("""
        SELECT results, avito_link FROM cache WHERE query = ? AND filter_type = ? AND price_filter = ? AND city = ?
    """, cache_key)
    cached = cursor.fetchone()

    if cached:
        try:
            cached_time = datetime.strptime(cursor.execute("SELECT timestamp FROM cache WHERE query = ?", (query,)).fetchone()[0],
                                        "%Y-%m-%d %H:%M:%S.%f")
            if datetime.now() - cached_time < timedelta(hours=1):
                results = cached[0].split("|||") if cached[0] else []
                avito_link = cached[1]
                return results, avito_link
        except:
            pass

    url = f"{get_drom_url(city)}/auto/parts/?q={urllib.parse.quote(query)}"
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'}
    try:
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        items = soup.find_all('div', class_='b-advItem')[:3]
        results = []
        for item in items:
            title = item.find('a', class_='b-advItem__title')
            price = item.find('div', class_='b-advItem__price')
            if title and price:
                link = get_drom_url(city) + title['href']
                results.append(f"üîß <b>{title.get_text(strip=True)}</b>\nüíµ {price.get_text(strip=True)}\nüîó <a href='{link}'>–°–º–æ—Ç—Ä–µ—Ç—å</a>")
    except:
        results = []

    avito_query = urllib.parse.quote(query)
    avito_city = {"–ú–æ—Å–∫–≤–∞": "moskva", "–°–ü–±": "sankt-peterburg"}.get(city, "novosibirsk")
    avito_link = f"https://{avito_city}.avito.ru/all/avtozapchasti_i_aksessuary?q={avito_query}"

    result_str = "|||".join(results) if results else ""
    cursor.execute("""
        INSERT OR REPLACE INTO cache (query, filter_type, price_filter, city, results, avito_link, timestamp)
        VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
    """, (*cache_key, result_str, avito_link))
    conn.commit()

    return results if results else ["üîç –ù–µ—Ç –Ω–∞ Drom"], avito_link

# --- –ê–Ω–∞–ª–æ–≥–∏ ---
analog_map = {
    "BOSCH 0445120012": ["DENSO 123456", "STANDART BS-778"],
    "611113112R": ["77010112", "FEBEST R112"],
}

def find_analogs(part_number):
    return analog_map.get(part_number.upper(), [])

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
user_city = {}
user_state = {}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ ---
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    photo_path = f"temp_{user_id}.jpg"
    await message.photo[-1].download(photo_path)

    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª
    part_number = find_part_number(photo_path)
    os.remove(photo_path)

    if part_number:
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª: <code>{part_number}</code>", parse_mode="HTML")
        city = user_city.get(user_id, "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")
        await search_and_show(user_id, part_number, city)
    else:
        await message.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª... (OCR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–µ–∫—Å—Ç)")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ---
@dp.message_handler(lambda m: m.text in ["üì∏ –§–æ—Ç–æ", "‚úè –¢–µ–∫—Å—Ç", "üåç –ì–æ—Ä–æ–¥", "üìã –ò—Å—Ç–æ—Ä–∏—è", "‚óÄ –ù–∞–∑–∞–¥"])
async def handle_menu(message: types.Message):
    user_id = message.from_user.id
    if message.text == "üì∏ –§–æ—Ç–æ":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ", reply_markup=ReplyKeyboardRemove())
    elif message.text == "‚úè –¢–µ–∫—Å—Ç":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ", reply_markup=ReplyKeyboardRemove())
        user_state[user_id] = "awaiting_text"
    elif message.text == "üåç –ì–æ—Ä–æ–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=cities_kb)
    elif message.text == "üìã –ò—Å—Ç–æ—Ä–∏—è":
        cursor.execute("SELECT query, city, timestamp FROM searches WHERE user_id = ? ORDER BY timestamp DESC LIMIT 5", (user_id,))
        history = cursor.fetchall()
        if history:
            text = "üïò <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:</b>\n\n"
            for q, c, t in history:
                text += f"‚Ä¢ <code>{q}</code> ‚Äî {c} ({t[:16]})\n"
        else:
            text = "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
        await message.answer(text, parse_mode="HTML", reply_markup=main_kb)

@dp.message_handler(lambda m: user_state.get(m.from_user.id) == "awaiting_text")
async def handle_text_input(message: types.Message):
    user_id = message.from_user.id
    user_state.pop(user_id, None)
    query = message.text.strip()

    detected_city = detect_car_from_text(query)
    if detected_city:
        user_city[user_id] = detected_city
        await message.answer(f"üöó –û–ø—Ä–µ–¥–µ–ª—ë–Ω –≥–æ—Ä–æ–¥: <b>{detected_city}</b>", parse_mode="HTML")

    city = user_city.get(user_id, "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")
    await search_and_show(user_id, query, city)

async def search_and_show(user_id, query, city):
    await bot.send_chat_action(user_id, "typing")
    drom_results, avito_link = parse_drom(query, city=city)

    analogs = find_analogs(query)
    if analogs:
        analog_text = "\n".join([f"üîÅ {a}" for a in analogs[:2]])
        drom_results.append(f"üîÅ <b>–ê–Ω–∞–ª–æ–≥–∏:</b>\n{analog_text}")

    response = "\n\n".join(drom_results)

    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å –Ω–∞ Avito", url=avito_link))
    await bot.send_message(user_id, response, parse_mode="HTML", reply_markup=kb, disable_web_page_preview=True)

# --- –ì–æ—Ä–æ–¥ ---
@dp.message_handler(lambda m: m.text in ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"])
async def set_city(message: types.Message):
    user_id = message.from_user.id
    user_city[user_id] = message.text
    await message.answer(f"üìç –ì–æ—Ä–æ–¥: <b>{message.text}</b>", parse_mode="HTML", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "‚óÄ –ù–∞–∑–∞–¥")
async def back(message: types.Message):
    await message.answer("–ú–µ–Ω—é:", reply_markup=main_kb)

# --- /start ---
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_city[message.from_user.id] = "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"
    await message.answer(
        "üöÄ <b>–ë–æ—Ç –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π</b>\n\n"
        "‚Ä¢ üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ ‚Äî –Ω–∞–π–¥—ë–º –∞—Ä—Ç–∏–∫—É–ª\n"
        "‚Ä¢ ‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî –∏—â–µ–º –Ω–∞ Drom\n"
        "‚Ä¢ üåç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥\n"
        "‚Ä¢ üîç –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Avito\n"
        "‚Ä¢ üìã –°–º–æ—Ç—Ä–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é\n\n"
        "–í—Å–µ –ø–æ–∏—Å–∫–∏ ‚Äî –ª–µ–≥–∞–ª—å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ.",
        parse_mode="HTML",
        reply_markup=main_kb
    )

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---
from flask import Flask
app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!"

def run():
    app.run(host='0.0.0.0', port=8080)

if __name__ == '__main__':
    import threading
    t = threading.Thread(target=run)
    t.start()
    executor.start_polling(dp, skip_updates=True)
